#include "Thin_Film_Interference.h"

#include <filesystem>
#include <string>
#include <regex>

#include "boost/algorithm/string.hpp"

#include <QCoreApplication>

#include "HgCdTe.h"
#include "III_V_Materials.h"
#include "Optimize.h"
#include "Ceres_Curve_Fitting.h"

//#ifdef _WIN32
//namespace fs = std::experimental::filesystem;
//#else
namespace fs = std::filesystem;
//#endif

using namespace arma;
using namespace std::complex_literals;


using IndexFunction = std::function< arma::cx_vec( const arma::vec& wavelengths, Optional_Material_Parameters optional_parameters ) >;
std::map< Material, IndexFunction > all_material_indices;


std::map<std::string, Material> name_to_material =
{
	{ "Si"          ,  Material::Si },
	{ "HgCdTe"      ,  Material::HgCdTe },
	{ "CdTe"        ,  Material::CdTe },
	{ "ZnSe"        ,  Material::ZnSe },
	{ "ZnS"         ,  Material::ZnS },
	//{ "Ge"          ,  Material::Ge },
	//{ "Si3N4"       ,  Material::Si3N4 },
	//{ "BaF2"        ,  Material::BaF2 },
	//{ "SuperLattice",  Material::SuperLattice },
	{ "SiO2"        ,  Material::SiO2 },
	{ "QDots"       ,  Material::QDots },
	{ "TestA"       ,  Material::TestA },
	{ "TestB"       ,  Material::TestB },
	{ "Air"         ,  Material::Air },
	{ "AlAs"        ,  Material::AlAs },
	{ "GaAs"        ,  Material::GaAs },
	//{ "InAs"        ,  Material::InAs },
	{ "Mirror"      ,  Material::Mirror }
};

std::map< Material, std::array< std::optional<double>, 4 > > defaults_per_material =
{ /*  Material    , thickness,  composition,    tauts_gap, urbach_energy */
	{ Material::Si    , { 1.0, std::nullopt, std::nullopt, std::nullopt } },
	{ Material::HgCdTe, { 1.0,          0.3,        100.0,         10.0 } },
	{ Material::CdTe  , { 1.0, std::nullopt, std::nullopt, std::nullopt } },
	{ Material::ZnSe  , { 1.0, std::nullopt, std::nullopt, std::nullopt } },
	{ Material::ZnS   , { 1.0, std::nullopt, std::nullopt, std::nullopt } },
	{ Material::SiO2  , { 1.0, std::nullopt, std::nullopt, std::nullopt } },
	{ Material::QDots , { 1.0, std::nullopt, std::nullopt, std::nullopt } },
	{ Material::TestA , { 1.0, std::nullopt, std::nullopt, std::nullopt } },
	{ Material::TestB , { 1.0, std::nullopt, std::nullopt, std::nullopt } },
	{ Material::Air   , { 1.0, std::nullopt, std::nullopt, std::nullopt } },
	{ Material::AlAs  , { 1.0, std::nullopt, std::nullopt, std::nullopt } },
	{ Material::GaAs  , { 1.0, std::nullopt, std::nullopt, std::nullopt } },
	{ Material::InAs  , { 1.0, std::nullopt, std::nullopt, std::nullopt } },
	{ Material::Mirror, { 1.0, std::nullopt, std::nullopt, std::nullopt } }
};

Material_To_Refraction_Component Load_Index_Of_Refraction_Files( const fs::path & directory, const char* indicator );
std::ofstream debug_file( "Debug.txt" );

Thin_Film_Interference::Thin_Film_Interference()
{
	qRegisterMetaType< std::vector<Material_Layer> >();
	for( const auto &[ material, x_y_data ] : Refraction_Coefficient )
	{
		const X_And_Y_Data & n_vs_lambda = Refraction_Coefficient[ material ];
		const X_And_Y_Data & k_vs_lambda = Attenuation_Coefficient[ material ];

		all_material_indices[ material ] = [&n_vs_lambda, &k_vs_lambda]( const arma::vec & wavelengths, Optional_Material_Parameters optional )
		{
			arma::vec scaled_wavelengths = 1E6 * wavelengths;
			auto n = Find_Closest_Datapoint( scaled_wavelengths, std::get<0>( n_vs_lambda ), std::get<1>( n_vs_lambda ) );
			auto k = Find_Closest_Datapoint( scaled_wavelengths, std::get<0>( k_vs_lambda ), std::get<1>( k_vs_lambda ) );
			return arma::cx_vec{ n, k };
		};
	}
	//Optional_Material_Parameters_AD test_params;
	//ADCVector test = HgCdTe::Refractive_Index_AD( arma::vec{}, test_params );
	all_material_indices[ Material::HgCdTe ] = HgCdTe::Refractive_Index< double >;
	all_material_indices[ Material::AlAs ] = []( const arma::vec & wavelengths, Optional_Material_Parameters optional_parameters ) { return III_V_Data::Get_AlAs_Refraction_Index( wavelengths, optional_parameters.temperature.value() ); };
	all_material_indices[ Material::GaAs ] = []( const arma::vec & wavelengths, Optional_Material_Parameters optional_parameters ) { return III_V_Data::Get_GaAs_Refraction_Index( wavelengths, optional_parameters.temperature.value() ); };
	//all_material_indices[ Material::InAs ] = []( const arma::vec & wavelengths, Optional_Material_Parameters optional_parameters ) { return III_V_Data::Get_InAs_Refraction_Index( wavelengths, optional_parameters.temperature.value() ); };
	all_material_indices[ Material::CdTe ] = []( const arma::vec & wavelengths, Optional_Material_Parameters optional_parameters ) { optional_parameters.composition = 1.0; return HgCdTe::Refractive_Index( wavelengths, optional_parameters ); };

	all_material_indices[ Material::Air ] = []( const arma::vec & wavelengths, Optional_Material_Parameters optional_parameters ) { return arma::cx_vec( arma::size( wavelengths ), arma::fill::ones ); };
	all_material_indices[ Material::Mirror ] = []( const arma::vec & wavelengths, Optional_Material_Parameters optional_parameters )
	{
		return arma::cx_vec( arma::size( wavelengths ) ).fill( 1E15 ); // Really big number that we can still do math with
	};
	if constexpr(false) // Debug output
	{
		//double temperature_k = 300.0;
		//Material_Layer materials( Material::Si );
		//Material_Layer backside_material{ Material::Mirror, 0.0, false, 1.0E-6, false };
		//arma::vec x_values = { 0.4, 0.400138995, 0.400278087, 0.400417275, 0.40055656, 0.400695943, 0.400835422, 0.400974998, 0.401114672, 0.401254443, 0.401394311, 0.401534277, 0.401674341, 0.401814502, 0.401954761, 0.402095118, 0.402235574, 0.402376127, 0.402516779, 0.402657528, 0.402798377, 0.402939324, 0.40308037, 0.403221514, 0.403362757, 0.4035041, 0.403645541, 0.403787082, 0.403928722, 0.404070461, 0.4042123, 0.404354238, 0.404496277, 0.404638415, 0.404780652, 0.40492299, 0.405065428, 0.405207967, 0.405350605, 0.405493345, 0.405636184, 0.405779125, 0.405922166, 0.406065308, 0.406208551, 0.406351895, 0.40649534, 0.406638887, 0.406782535, 0.406926285, 0.407070136, 0.407214089, 0.407358143, 0.4075023, 0.407646559, 0.40779092, 0.407935383, 0.408079949, 0.408224617, 0.408369388, 0.408514261, 0.408659238, 0.408804317, 0.408949499, 0.409094785, 0.409240173, 0.409385666, 0.409531261, 0.40967696, 0.409822763, 0.40996867, 0.410114681, 0.410260795, 0.410407014, 0.410553337, 0.410699765, 0.410846297, 0.410992933, 0.411139674, 0.41128652, 0.411433471, 0.411580528, 0.411727689, 0.411874955, 0.412022327, 0.412169805, 0.412317388, 0.412465076, 0.412612871, 0.412760771, 0.412908778, 0.413056891, 0.41320511, 0.413353435, 0.413501867, 0.413650406, 0.413799051, 0.413947804, 0.414096663, 0.414245629, 0.414394703, 0.414543884, 0.414693172, 0.414842568, 0.414992072, 0.415141683, 0.415291402, 0.41544123, 0.415591165, 0.415741209, 0.415891361, 0.416041622, 0.416191991, 0.416342469, 0.416493056, 0.416643751, 0.416794556, 0.41694547, 0.417096494, 0.417247627, 0.417398869, 0.417550221, 0.417701683, 0.417853255, 0.418004937, 0.418156729, 0.418308631, 0.418460644, 0.418612767, 0.418765001, 0.418917346, 0.419069801, 0.419222368, 0.419375046, 0.419527834, 0.419680735, 0.419833747, 0.41998687, 0.420140105, 0.420293452, 0.420446911, 0.420600482, 0.420754165, 0.420907961, 0.421061869, 0.42121589, 0.421370023, 0.42152427, 0.421678629, 0.421833101, 0.421987687, 0.422142386, 0.422297198, 0.422452124, 0.422607164, 0.422762317, 0.422917585, 0.423072966, 0.423228462, 0.423384072, 0.423539797, 0.423695636, 0.42385159, 0.424007659, 0.424163843, 0.424320141, 0.424476556, 0.424633085, 0.42478973, 0.424946491, 0.425103367, 0.425260359, 0.425417467, 0.425574691, 0.425732032, 0.425889489, 0.426047062, 0.426204752, 0.426362559, 0.426520483, 0.426678524, 0.426836682, 0.426994957, 0.42715335, 0.42731186, 0.427470488, 0.427629234, 0.427788097, 0.427947079, 0.428106179, 0.428265397, 0.428424734, 0.428584189, 0.428743763, 0.428903456, 0.429063268, 0.4292232, 0.42938325, 0.42954342, 0.429703709, 0.429864118, 0.430024647, 0.430185296, 0.430346065, 0.430506954, 0.430667963, 0.430829093, 0.430990344, 0.431151715, 0.431313207, 0.43147482, 0.431636554, 0.43179841, 0.431960387, 0.432122486, 0.432284706, 0.432447048, 0.432609512, 0.432772099, 0.432934807, 0.433097638, 0.433260591, 0.433423668, 0.433586866, 0.433750188, 0.433913633, 0.434077201, 0.434240893, 0.434404708, 0.434568647, 0.434732709, 0.434896896, 0.435061206, 0.435225641, 0.4353902, 0.435554883, 0.435719691, 0.435884624, 0.436049682, 0.436214865, 0.436380173, 0.436545606, 0.436711165, 0.43687685, 0.43704266, 0.437208596, 0.437374658, 0.437540847, 0.437707161, 0.437873603, 0.43804017, 0.438206865, 0.438373687, 0.438540635, 0.438707711, 0.438874914, 0.439042245, 0.439209703, 0.439377289, 0.439545003, 0.439712846, 0.439880816, 0.440048915, 0.440217142, 0.440385498, 0.440553983, 0.440722596, 0.440891339, 0.441060211, 0.441229213, 0.441398344, 0.441567605, 0.441736996, 0.441906516, 0.442076167, 0.442245948, 0.44241586, 0.442585902, 0.442756075, 0.442926379, 0.443096814, 0.44326738, 0.443438078, 0.443608907, 0.443779867, 0.44395096, 0.444122185, 0.444293541, 0.44446503, 0.444636651, 0.444808405, 0.444980292, 0.445152312, 0.445324464, 0.44549675, 0.445669169, 0.445841722, 0.446014409, 0.446187229, 0.446360183, 0.446533271, 0.446706494, 0.446879851, 0.447053343, 0.447226969, 0.44740073, 0.447574627, 0.447748659, 0.447922826, 0.448097128, 0.448271566, 0.448446141, 0.448620851, 0.448795697, 0.44897068, 0.449145799, 0.449321055, 0.449496448, 0.449671978, 0.449847644, 0.450023448, 0.45019939, 0.450375469, 0.450551686, 0.450728041, 0.450904534, 0.451081166, 0.451257936, 0.451434844, 0.451611891, 0.451789077, 0.451966402, 0.452143867, 0.452321471, 0.452499214, 0.452677097, 0.45285512, 0.453033283, 0.453211587, 0.453390031, 0.453568615, 0.45374734, 0.453926206, 0.454105213, 0.454284362, 0.454463651, 0.454643083, 0.454822656, 0.455002371, 0.455182228, 0.455362227, 0.455542369, 0.455722653, 0.45590308, 0.45608365, 0.456264363, 0.45644522, 0.456626219, 0.456807363, 0.45698865, 0.457170081, 0.457351656, 0.457533376, 0.45771524, 0.457897248, 0.458079402, 0.4582617, 0.458444144, 0.458626733, 0.458809467, 0.458992347, 0.459175373, 0.459358545, 0.459541863, 0.459725327, 0.459908938, 0.460092696, 0.460276601, 0.460460653, 0.460644852, 0.460829198, 0.461013692, 0.461198334, 0.461383124, 0.461568062, 0.461753148, 0.461938383, 0.462123766, 0.462309298, 0.46249498, 0.46268081, 0.46286679, 0.463052919, 0.463239199, 0.463425628, 0.463612207, 0.463798937, 0.463985817, 0.464172847, 0.464360029, 0.464547362, 0.464734845, 0.464922481, 0.465110267, 0.465298206, 0.465486296, 0.465674539, 0.465862934, 0.466051481, 0.466240181, 0.466429034, 0.46661804, 0.4668072, 0.466996512, 0.467185979, 0.467375599, 0.467565373, 0.467755301, 0.467945384, 0.468135621, 0.468326013, 0.46851656, 0.468707261, 0.468898119, 0.469089131, 0.4692803, 0.469471624, 0.469663105, 0.469854741, 0.470046534, 0.470238484, 0.470430591, 0.470622854, 0.470815275, 0.471007853, 0.471200589, 0.471393483, 0.471586535, 0.471779744, 0.471973113, 0.472166639, 0.472360325, 0.472554169, 0.472748173, 0.472942336, 0.473136659, 0.473331141, 0.473525783, 0.473720586, 0.473915549, 0.474110672, 0.474305956, 0.474501401, 0.474697007, 0.474892775, 0.475088704, 0.475284794, 0.475481047, 0.475677462, 0.475874039, 0.476070779, 0.476267681, 0.476464747, 0.476661975, 0.476859367, 0.477056923, 0.477254642, 0.477452525, 0.477650572, 0.477848784, 0.47804716, 0.478245701, 0.478444408, 0.478643279, 0.478842315, 0.479041518, 0.479240886, 0.47944042, 0.47964012, 0.479839987, 0.48004002, 0.48024022, 0.480440587, 0.480641122, 0.480841824, 0.481042694, 0.481243731, 0.481444937, 0.481646311, 0.481847853, 0.482049565, 0.482251445, 0.482453494, 0.482655713, 0.482858101, 0.483060659, 0.483263388, 0.483466286, 0.483669355, 0.483872594, 0.484076005, 0.484279586, 0.484483339, 0.484687263, 0.484891359, 0.485095627, 0.485300067, 0.48550468, 0.485709465, 0.485914423, 0.486119554, 0.486324859, 0.486530336, 0.486735988, 0.486941813, 0.487147813, 0.487353987, 0.487560335, 0.487766859, 0.487973557, 0.488180431, 0.48838748, 0.488594705, 0.488802105, 0.489009682, 0.489217436, 0.489425366, 0.489633472, 0.489841756, 0.490050217, 0.490258856, 0.490467672, 0.490676666, 0.490885839, 0.491095189, 0.491304719, 0.491514427, 0.491724315, 0.491934381, 0.492144628, 0.492355054, 0.49256566, 0.492776446, 0.492987413, 0.493198561, 0.493409889, 0.493621399, 0.49383309, 0.494044963, 0.494257018, 0.494469255, 0.494681674, 0.494894275, 0.49510706, 0.495320028, 0.495533178, 0.495746513, 0.495960031, 0.496173733, 0.49638762, 0.496601691, 0.496815946, 0.497030387, 0.497245013, 0.497459824, 0.497674821, 0.497890003, 0.498105372, 0.498320928, 0.49853667, 0.498752599, 0.498968715, 0.499185018, 0.499401509, 0.499618188, 0.499835055, 0.50005211, 0.500269354, 0.500486787, 0.500704409, 0.50092222, 0.501140221, 0.501358412, 0.501576792, 0.501795363, 0.502014125, 0.502233077, 0.502452221, 0.502671556, 0.502891082, 0.5031108, 0.503330711, 0.503550813, 0.503771109, 0.503991597, 0.504212278, 0.504433152, 0.50465422, 0.504875482, 0.505096938, 0.505318589, 0.505540434, 0.505762474, 0.505984709, 0.506207139, 0.506429765, 0.506652587, 0.506875605, 0.50709882, 0.507322231, 0.507545839, 0.507769645, 0.507993647, 0.508217848, 0.508442247, 0.508666843, 0.508891639, 0.509116633, 0.509341826, 0.509567218, 0.50979281, 0.510018602, 0.510244594, 0.510470786, 0.510697179, 0.510923773, 0.511150568, 0.511377565, 0.511604763, 0.511832163, 0.512059765, 0.51228757, 0.512515578, 0.512743788, 0.512972202, 0.51320082, 0.513429642, 0.513658667, 0.513887897, 0.514117332, 0.514346972, 0.514576817, 0.514806867, 0.515037123, 0.515267585, 0.515498254, 0.515729129, 0.515960211, 0.516191501, 0.516422998, 0.516654702, 0.516886615, 0.517118735, 0.517351065, 0.517583603, 0.51781635, 0.518049307, 0.518282474, 0.51851585, 0.518749437, 0.518983234, 0.519217242, 0.519451462, 0.519685892, 0.519920535, 0.520155389, 0.520390456, 0.520625735, 0.520861227, 0.521096932, 0.52133285, 0.521568983, 0.521805329, 0.52204189, 0.522278665, 0.522515655, 0.52275286, 0.522990281, 0.523227917, 0.52346577, 0.523703838, 0.523942124, 0.524180626, 0.524419346, 0.524658283, 0.524897438, 0.525136811, 0.525376403, 0.525616213, 0.525856243, 0.526096491, 0.52633696, 0.526577648, 0.526818556, 0.527059685, 0.527301035, 0.527542606, 0.527784398, 0.528026412, 0.528268648, 0.528511107, 0.528753788, 0.528996692, 0.52923982, 0.529483171, 0.529726746, 0.529970545, 0.530214569, 0.530458817, 0.530703291, 0.53094799, 0.531192914, 0.531438065, 0.531683443, 0.531929047, 0.532174878, 0.532420936, 0.532667222, 0.532913736, 0.533160478, 0.533407449, 0.533654648, 0.533902077, 0.534149736, 0.534397624, 0.534645742, 0.534894091, 0.535142671, 0.535391482, 0.535640525, 0.535889799, 0.536139305, 0.536389044, 0.536639016, 0.53688922, 0.537139659, 0.53739033, 0.537641236, 0.537892377, 0.538143752, 0.538395362, 0.538647207, 0.538899289, 0.539151606, 0.53940416, 0.53965695, 0.539909977, 0.540163242, 0.540416745, 0.540670485, 0.540924464, 0.541178682, 0.541433139, 0.541687835, 0.541942771, 0.542197947, 0.542453363, 0.542709021, 0.542964919, 0.543221059, 0.54347744, 0.543734064, 0.54399093, 0.544248039, 0.544505391, 0.544762986, 0.545020825, 0.545278909, 0.545537237, 0.54579581, 0.546054628, 0.546313692, 0.546573002, 0.546832558, 0.54709236, 0.54735241, 0.547612707, 0.547873251, 0.548134044, 0.548395085, 0.548656375, 0.548917914, 0.549179702, 0.549441741, 0.549704029, 0.549966568, 0.550229358, 0.550492399, 0.550755692, 0.551019236, 0.551283033, 0.551547083, 0.551811386, 0.552075942, 0.552340752, 0.552605816, 0.552871135, 0.553136709, 0.553402537, 0.553668622, 0.553934962, 0.554201559, 0.554468413, 0.554735524, 0.555002892, 0.555270518, 0.555538402, 0.555806545, 0.556074947, 0.556343608, 0.556612529, 0.55688171, 0.557151152, 0.557420854, 0.557690818, 0.557961043, 0.55823153, 0.55850228, 0.558773292, 0.559044567, 0.559316106, 0.559587909, 0.559859977, 0.560132309, 0.560404906, 0.560677768, 0.560950896, 0.561224291, 0.561497952, 0.56177188, 0.562046076, 0.562320539, 0.562595271, 0.562870271, 0.56314554, 0.563421078, 0.563696887, 0.563972965, 0.564249314, 0.564525934, 0.564802825, 0.565079988, 0.565357423, 0.565635131, 0.565913112, 0.566191366, 0.566469894, 0.566748696, 0.567027772, 0.567307124, 0.567586751, 0.567866654, 0.568146832, 0.568427288, 0.568708021, 0.568989031, 0.569270318, 0.569551884, 0.569833729, 0.570115853, 0.570398256, 0.57068094, 0.570963903, 0.571247148, 0.571530673, 0.57181448, 0.572098569, 0.572382941, 0.572667595, 0.572952533, 0.573237754, 0.573523259, 0.573809049, 0.574095124, 0.574381484, 0.574668131, 0.574955063, 0.575242282, 0.575529788, 0.575817582, 0.576105663, 0.576394033, 0.576682692, 0.57697164, 0.577260878, 0.577550406, 0.577840225, 0.578130334, 0.578420735, 0.578711428, 0.579002414, 0.579293692, 0.579585263, 0.579877128, 0.580169287, 0.58046174, 0.580754489, 0.581047533, 0.581340872, 0.581634509, 0.581928441, 0.582222672, 0.5825172, 0.582812026, 0.58310715, 0.583402574, 0.583698297, 0.58399432, 0.584290643, 0.584587268, 0.584884193, 0.585181421, 0.585478951, 0.585776783, 0.586074919, 0.586373358, 0.586672101, 0.586971149, 0.587270502, 0.58757016, 0.587870125, 0.588170395, 0.588470973, 0.588771858, 0.589073051, 0.589374552, 0.589676362, 0.589978481, 0.59028091, 0.59058365, 0.5908867, 0.591190061, 0.591493733, 0.591797718, 0.592102016, 0.592406626, 0.59271155, 0.593016789, 0.593322341, 0.593628209, 0.593934392, 0.594240892, 0.594547708, 0.59485484, 0.595162291, 0.595470059, 0.595778146, 0.596086551, 0.596395277, 0.596704322, 0.597013687, 0.597323374, 0.597633382, 0.597943712, 0.598254364, 0.598565339, 0.598876638, 0.599188261, 0.599500208, 0.59981248, 0.600125078, 0.600438002, 0.600751252, 0.601064829, 0.601378734, 0.601692967, 0.602007528, 0.602322419, 0.602637639, 0.602953189, 0.60326907, 0.603585281, 0.603901825, 0.604218701, 0.604535909, 0.604853451, 0.605171326, 0.605489536, 0.605808081, 0.606126961, 0.606446177, 0.606765729, 0.607085618, 0.607405844, 0.607726409, 0.608047312, 0.608368555, 0.608690136, 0.609012058, 0.609334321, 0.609656925, 0.609979871, 0.610303159, 0.61062679, 0.610950764, 0.611275082, 0.611599745, 0.611924753, 0.612250106, 0.612575806, 0.612901852, 0.613228246, 0.613554987, 0.613882077, 0.614209516, 0.614537304, 0.614865442, 0.615193931, 0.615522771, 0.615851963, 0.616181507, 0.616511404, 0.616841654, 0.617172259, 0.617503218, 0.617834532, 0.618166201, 0.618498228, 0.61883061, 0.619163351, 0.619496449, 0.619829906, 0.620163723, 0.620497898, 0.620832435, 0.621167332, 0.621502591, 0.621838211, 0.622174195, 0.622510542, 0.622847252, 0.623184327, 0.623521767, 0.623859573, 0.624197745, 0.624536284, 0.62487519, 0.625214464, 0.625554107, 0.625894119, 0.626234501, 0.626575253, 0.626916376, 0.627257871, 0.627599738, 0.627941978, 0.628284592, 0.628627579, 0.628970942, 0.629314679, 0.629658793, 0.630003283, 0.63034815, 0.630693395, 0.631039018, 0.63138502, 0.631731402, 0.632078164, 0.632425308, 0.632772832, 0.633120739, 0.633469028, 0.633817701, 0.634166758, 0.6345162, 0.634866027, 0.63521624, 0.63556684, 0.635917826, 0.636269201, 0.636620964, 0.636973116, 0.637325659, 0.637678591, 0.638031915, 0.63838563, 0.638739738, 0.639094239, 0.639449134, 0.639804423, 0.640160107, 0.640516186, 0.640872663, 0.641229536, 0.641586806, 0.641944475, 0.642302544, 0.642661011, 0.643019879, 0.643379149, 0.643738819, 0.644098892, 0.644459369, 0.644820249, 0.645181533, 0.645543222, 0.645905317, 0.646267819, 0.646630728, 0.646994044, 0.647357769, 0.647721903, 0.648086448, 0.648451402, 0.648816768, 0.649182546, 0.649548736, 0.64991534, 0.650282358, 0.650649791, 0.651017639, 0.651385903, 0.651754585, 0.652123683, 0.6524932, 0.652863136, 0.653233492, 0.653604268, 0.653975466, 0.654347085, 0.654719127, 0.655091592, 0.655464481, 0.655837795, 0.656211534, 0.6565857, 0.656960292, 0.657335312, 0.657710761, 0.658086638, 0.658462946, 0.658839684, 0.659216854, 0.659594455, 0.65997249, 0.660350958, 0.66072986, 0.661109197, 0.661488971, 0.66186918, 0.662249827, 0.662630913, 0.663012437, 0.6633944, 0.663776804, 0.664159649, 0.664542936, 0.664926666, 0.665310839, 0.665695456, 0.666080518, 0.666466026, 0.666851981, 0.667238382, 0.667625232, 0.66801253, 0.668400279, 0.668788477, 0.669177127, 0.669566229, 0.669955783, 0.670345791, 0.670736253, 0.671127171, 0.671518544, 0.671910375, 0.672302662, 0.672695408, 0.673088614, 0.673482279, 0.673876404, 0.674270992, 0.674666042, 0.675061555, 0.675457532, 0.675853973, 0.676250881, 0.676648255, 0.677046096, 0.677444405, 0.677843183, 0.678242431, 0.67864215, 0.67904234, 0.679443002, 0.679844137, 0.680245747, 0.680647831, 0.68105039, 0.681453426, 0.68185694, 0.682260931, 0.682665402, 0.683070352, 0.683475783, 0.683881696, 0.684288091, 0.68469497, 0.685102332, 0.68551018, 0.685918513, 0.686327333, 0.686736641, 0.687146438, 0.687556723, 0.687967499, 0.688378766, 0.688790525, 0.689202777, 0.689615523, 0.690028763, 0.690442499, 0.690856731, 0.691271461, 0.691686689, 0.692102416, 0.692518643, 0.692935371, 0.693352601, 0.693770334, 0.69418857, 0.694607311, 0.695026557, 0.69544631, 0.69586657, 0.696287338, 0.696708616, 0.697130403, 0.697552702, 0.697975512, 0.698398836, 0.698822673, 0.699247025, 0.699671892, 0.700097276, 0.700523178, 0.700949598, 0.701376538, 0.701803998, 0.70223198, 0.702660483, 0.70308951, 0.703519062, 0.703949138, 0.704379741, 0.70481087, 0.705242528, 0.705674715, 0.706107432, 0.70654068, 0.70697446, 0.707408773, 0.707843619, 0.708279001, 0.708714919, 0.709151373, 0.709588366, 0.710025897, 0.710463968, 0.710902581, 0.711341735, 0.711781432, 0.712221672, 0.712662458, 0.71310379, 0.713545669, 0.713988095, 0.714431071, 0.714874596, 0.715318673, 0.715763302, 0.716208484, 0.71665422, 0.717100511, 0.717547358, 0.717994762, 0.718442725, 0.718891247, 0.71934033, 0.719789974, 0.72024018, 0.72069095, 0.721142285, 0.721594185, 0.722046652, 0.722499686, 0.72295329, 0.723407463, 0.723862208, 0.724317524, 0.724773414, 0.725229878, 0.725686917, 0.726144533, 0.726602726, 0.727061498, 0.727520849, 0.727980781, 0.728441296, 0.728902393, 0.729364074, 0.72982634, 0.730289193, 0.730752634, 0.731216662, 0.731681281, 0.73214649, 0.732612292, 0.733078686, 0.733545675, 0.734013259, 0.734481439, 0.734950217, 0.735419594, 0.735889571, 0.736360148, 0.736831328, 0.737303112, 0.7377755, 0.738248493, 0.738722094, 0.739196302, 0.73967112, 0.740146548, 0.740622588, 0.741099241, 0.741576507, 0.742054388, 0.742532886, 0.743012002, 0.743491736, 0.743972089, 0.744453064, 0.744934662, 0.745416882, 0.745899728, 0.746383199, 0.746867298, 0.747352025, 0.747837381, 0.748323369, 0.748809988, 0.749297241, 0.749785128, 0.750273651, 0.750762811, 0.75125261, 0.751743047, 0.752234126, 0.752725847, 0.75321821, 0.753711219, 0.754204873, 0.754699174, 0.755194124, 0.755689723, 0.756185973, 0.756682876, 0.757180431, 0.757678642, 0.758177509, 0.758677033, 0.759177215, 0.759678058, 0.760179562, 0.760681728, 0.761184558, 0.761688054, 0.762192216, 0.762697046, 0.763202545, 0.763708715, 0.764215556, 0.764723071, 0.76523126, 0.765740125, 0.766249667, 0.766759888, 0.767270789, 0.767782371, 0.768294636, 0.768807584, 0.769321219, 0.76983554, 0.770350549, 0.770866247, 0.771382637, 0.771899718, 0.772417494, 0.772935965, 0.773455132, 0.773974997, 0.774495561, 0.775, 0.776061464, 0.776584839, 0.777108922, 0.777633712, 0.778159211, 0.778685421, 0.779212343, 0.779739978, 0.780268329, 0.780797396, 0.781327181, 0.781857686, 0.782388912, 0.782920859, 0.783453531, 0.783986928, 0.784521052, 0.785055904, 0.785591486, 0.786127799, 0.786664845, 0.787202625, 0.787741141, 0.788280394, 0.788820386, 0.789361119, 0.789902593, 0.790444811, 0.790987773, 0.791531482, 0.792075939, 0.792621145, 0.793167103, 0.793713813, 0.794261277, 0.794809498, 0.795358475, 0.795908211, 0.796458708, 0.797009967, 0.797561989, 0.798114777, 0.798668331, 0.799222654, 0.799777747, 0.800333611, 0.800890249, 0.801447661, 0.80200585, 0.802564817, 0.803124564, 0.803685092, 0.804246403, 0.804808499, 0.805371381, 0.80593505, 0.80649951, 0.80706476, 0.807630804, 0.808197642, 0.808765276, 0.809333708, 0.80990294, 0.810472973, 0.811043809, 0.81161545, 0.812187897, 0.812761152, 0.813335217, 0.813910093, 0.814485783, 0.815062288, 0.815639609, 0.816217749, 0.816796709, 0.817376491, 0.817957096, 0.818538527, 0.819120785, 0.819703872, 0.82028779, 0.820872541, 0.821458125, 0.822044546, 0.822631805, 0.823219903, 0.823808842, 0.824398625, 0.824989253, 0.825580728, 0.826173052, 0.826766226, 0.827360253, 0.827955134, 0.828550871, 0.829147465, 0.82974492, 0.830343236, 0.830942416, 0.831542461, 0.832143373, 0.832745155, 0.833347807, 0.833951333, 0.834555733, 0.83516101, 0.835767165, 0.836374201, 0.836982119, 0.837590922, 0.838200611, 0.838811189, 0.839422656, 0.840035016, 0.84064827, 0.84126242, 0.841877467, 0.842493415, 0.843110265, 0.843728019, 0.844346678, 0.844966246, 0.845586723, 0.846208113, 0.846830416, 0.847453636, 0.848077773, 0.84870283, 0.84932881, 0.849955713, 0.850583543, 0.8512123, 0.851841988, 0.852472609, 0.853104164, 0.853736655, 0.854370085, 0.855004455, 0.855639768, 0.856276026, 0.856913231, 0.857551385, 0.85819049, 0.858830549, 0.859471563, 0.860113535, 0.860756466, 0.861400359, 0.862045216, 0.86269104, 0.863337832, 0.863985594, 0.864634329, 0.86528404, 0.865934727, 0.866586394, 0.867239042, 0.867892674, 0.868547292, 0.869202899, 0.869859495, 0.870517085, 0.87117567, 0.871835251, 0.872495833, 0.873157416, 0.873820003, 0.874483597, 0.875148199, 0.875813812, 0.876480438, 0.87714808, 0.87781674, 0.878486421, 0.879157123, 0.879828851, 0.880501606, 0.88117539, 0.881850207, 0.882526058, 0.883202945, 0.883880872, 0.88455984, 0.885239852, 0.885920911, 0.886603018, 0.887286177, 0.887970389, 0.888655657, 0.889341983, 0.890029371, 0.890717822, 0.891407339, 0.892097924, 0.89278958, 0.893482309, 0.894176114, 0.894870998, 0.895566962, 0.89626401, 0.896962144, 0.897661366, 0.898361679, 0.899063086, 0.899765588, 0.90046919, 0.901173893, 0.901879699, 0.902586612, 0.903294634, 0.904003768, 0.904714016, 0.905425381, 0.906137866, 0.906851473, 0.907566204, 0.908282063, 0.908999053, 0.909717175, 0.910436433, 0.911156829, 0.911878366, 0.912601046, 0.913324873, 0.914049849, 0.914775977, 0.91550326, 0.9162317, 0.9169613, 0.917692062, 0.918423991, 0.919157088, 0.919891356, 0.920626799, 0.921363418, 0.922101217, 0.922840199, 0.923580366, 0.924321721, 0.925064267, 0.925808008, 0.926552945, 0.927299082, 0.928046422, 0.928794967, 0.929544721, 0.930295686, 0.931047865, 0.931801262, 0.932555879, 0.93331172, 0.934068787, 0.934827082, 0.93558661, 0.936347374, 0.937109375, 0.937872618, 0.938637105, 0.939402839, 0.940169824, 0.940938062, 0.941707556, 0.942478311, 0.943250328, 0.94402361, 0.944798162, 0.945573986, 0.946351085, 0.947129462, 0.947909121, 0.948690064, 0.949472296, 0.950255818, 0.951040634, 0.951826748, 0.952614163, 0.953402881, 0.954192907, 0.954984243, 0.955776892, 0.956570859, 0.957366146, 0.958162756, 0.958960693, 0.95975996, 0.960560561, 0.961362498, 0.962165775, 0.962970396, 0.963776364, 0.964583682, 0.965392354, 0.966202383, 0.967013772, 0.967826525, 0.968640646, 0.969456137, 0.970273003, 0.971091246, 0.971910871, 0.97273188, 0.973554278, 0.974378067, 0.975203252, 0.976029836, 0.976857822, 0.977687213, 0.978518015, 0.97935023, 0.980183861, 0.981018913, 0.981855389, 0.982693292, 0.983532627, 0.984373397, 0.985215606, 0.986059257, 0.986904354, 0.987750901, 0.988598901, 0.989448359, 0.990299278, 0.991151661, 0.992005513, 0.992860838, 0.993717639, 0.99457592, 0.995435685, 0.996296937, 0.997159681, 0.998023921, 0.99888966, 0.999756902, 1.000625652, 1.001495912, 1.002367688, 1.003240983, 1.0041158, 1.004992145, 1.005870021, 1.006749432, 1.007630382, 1.008512874, 1.009396914, 1.010282506, 1.011169652, 1.012058358, 1.012948628, 1.013840465, 1.014733874, 1.015628859, 1.016525424, 1.017423573, 1.018323311, 1.019224642, 1.020127569, 1.021032098, 1.021938232, 1.022845976, 1.023755334, 1.024666311, 1.02557891, 1.026493136, 1.027408994, 1.028326487, 1.02924562, 1.030166398, 1.031088825, 1.032012906, 1.032938644, 1.033866044, 1.034795111, 1.03572585, 1.036658264, 1.037592359, 1.038528139, 1.039465608, 1.040404771, 1.041345632, 1.042288197, 1.04323247, 1.044178455, 1.045126157, 1.046075581, 1.047026732, 1.047979614, 1.048934232, 1.049890591, 1.050848695, 1.05180855, 1.052770159, 1.053733529, 1.054698663, 1.055665567, 1.056634245, 1.057604702, 1.058576944, 1.059550975, 1.060526801, 1.061504425, 1.062483853, 1.063465091, 1.064448142, 1.065433013, 1.066419707, 1.067408231, 1.06839859, 1.069390788, 1.07038483, 1.071380722, 1.072378469, 1.073378076, 1.074379548, 1.075382891, 1.07638811, 1.07739521, 1.078404196, 1.079415073, 1.080427848, 1.081442524, 1.082459109, 1.083477606, 1.084498022, 1.085520362, 1.086544631, 1.087570835, 1.088598979, 1.089629069, 1.09066111, 1.091695108, 1.092731069, 1.093768997, 1.094808899, 1.09585078, 1.096894647, 1.097940503, 1.098988357, 1.100038212, 1.101090075, 1.102143951, 1.103199847, 1.104257768, 1.105317719, 1.106379708, 1.107443739, 1.108509819, 1.109577953, 1.110648148, 1.111720409, 1.112794743, 1.113871155, 1.114949651, 1.116030238, 1.117112922, 1.118197708, 1.119284603, 1.120373614, 1.121464745, 1.122558004, 1.123653396, 1.124750928, 1.125850606, 1.126952437, 1.128056426, 1.129162581, 1.130270907, 1.131381411, 1.132494099, 1.133608978, 1.134726054, 1.135845334, 1.136966825, 1.138090532, 1.139216462, 1.140344623, 1.14147502, 1.14260766, 1.143742551, 1.144879698, 1.146019108, 1.147160789, 1.148304747, 1.149450988, 1.15059952, 1.15175035, 1.152903484, 1.15405893, 1.155216693, 1.156376782, 1.157539204, 1.158703965, 1.159871072, 1.161040532, 1.162212354, 1.163386543, 1.164563107, 1.165742053, 1.166923389, 1.168107121, 1.169293258, 1.170481805, 1.171672772, 1.172866164, 1.17406199, 1.175260257, 1.176460973, 1.177664144, 1.178869779, 1.180077885, 1.181288469, 1.18250154, 1.183717105, 1.184935172, 1.186155748, 1.187378841, 1.188604459, 1.18983261, 1.191063302, 1.192296542, 1.193532338, 1.194770699, 1.196011633, 1.197255147, 1.198501249, 1.199749948, 1.201001252, 1.202255168, 1.203511706, 1.204770873, 1.206032677, 1.207297127, 1.208564232, 1.209833999, 1.211106437, 1.212381554, 1.213659359, 1.214939861, 1.216223067, 1.217508987, 1.218797629, 1.220089002, 1.221383114, 1.222679975, 1.223979592, 1.225281975, 1.226587133, 1.227895074, 1.229205807, 1.230519342, 1.231835687, 1.233154851, 1.234476844, 1.235801674, 1.237129351, 1.238459884, 1.239793282, 1.241129554, 1.24246871, 1.243810758, 1.245155709, 1.246503572, 1.247854356, 1.249208071, 1.250564726, 1.251924331, 1.253286896, 1.25465243, 1.256020942, 1.257392444, 1.258766944, 1.260144452, 1.261524978, 1.262908533, 1.264295125, 1.265684766, 1.267077465, 1.268473232, 1.269872078, 1.271274012, 1.272679045, 1.274087187, 1.275498449, 1.276912841, 1.278330373, 1.279751056, 1.2811749, 1.282601916, 1.284032114, 1.285465506, 1.286902101, 1.288341911, 1.289784946, 1.291231218, 1.292680736, 1.294133513, 1.295589559, 1.297048885, 1.298511502, 1.299977422, 1.301446655, 1.302919212, 1.304395106, 1.305874348, 1.307356948, 1.308842919, 1.310332271, 1.311825017, 1.313321168, 1.314820735, 1.316323731, 1.317830167, 1.319340055, 1.320853407, 1.322370234, 1.32389055, 1.325414365, 1.326941692, 1.328472543, 1.33000693, 1.331544866, 1.333086363, 1.334631433, 1.336180088, 1.337732342, 1.339288207, 1.340847694, 1.342410818, 1.343977591, 1.345548025, 1.347122134, 1.34869993, 1.350281426, 1.351866635, 1.353455571, 1.355048247, 1.356644675, 1.358244869, 1.359848843, 1.361456609, 1.363068182, 1.364683574, 1.3663028, 1.367925873, 1.369552807, 1.371183615, 1.372818312, 1.374456911, 1.376099426, 1.377745872, 1.379396263, 1.381050612, 1.382708934, 1.384371243, 1.386037554, 1.387707881, 1.389382239, 1.391060643, 1.392743106, 1.394429644, 1.396120272, 1.397815004, 1.399513855, 1.401216841, 1.402923977, 1.404635277, 1.406350757, 1.408070433, 1.409794319, 1.411522432, 1.413254786, 1.414991398, 1.416732283, 1.418477458, 1.420226936, 1.421980736, 1.423738872, 1.425501362, 1.42726822, 1.429039464, 1.430815109, 1.432595173, 1.434379671, 1.436168621, 1.437962038, 1.43975994, 1.441562344, 1.443369265, 1.445180723, 1.446996733, 1.448817313, 1.450642479, 1.45247225, 1.454306643, 1.456145675, 1.457989364, 1.459837728, 1.461690784, 1.463548551, 1.465411046, 1.467278287, 1.469150293, 1.471027082, 1.472908672, 1.474795082, 1.47668633, 1.478582435, 1.480483415, 1.482389289, 1.484300077, 1.486215798, 1.488136469, 1.490062112, 1.491992744, 1.493928386, 1.495869057, 1.497814776, 1.499765564, 1.50172144, 1.503682424, 1.505648536, 1.507619796, 1.509596224, 1.511577842, 1.513564669, 1.515556725, 1.517554033, 1.519556611, 1.521564482, 1.523577666, 1.525596184, 1.527620058, 1.529649309, 1.531683958, 1.533724028, 1.535769539, 1.537820513, 1.539876972, 1.541938939, 1.544006436, 1.546079484, 1.548158107, 1.550242326, 1.552332165, 1.554427646, 1.556528792, 1.558635625, 1.56074817, 1.56286645, 1.564990487, 1.567120305, 1.569255928, 1.57139738, 1.573544684, 1.575697865, 1.577856947, 1.580021954, 1.58219291, 1.58436984, 1.586552769, 1.588741722, 1.590936723, 1.593137797, 1.595344971, 1.597558269, 1.599777716, 1.602003339, 1.604235163, 1.606473214, 1.608717519, 1.610968103, 1.613224993, 1.615488215, 1.617757797, 1.620033765, 1.622316145, 1.624604966, 1.626900254, 1.629202037, 1.631510343, 1.633825199, 1.636146633, 1.638474673, 1.640809347, 1.643150685, 1.645498714, 1.647853463, 1.650214961, 1.652583238, 1.654958321, 1.657340242, 1.659729029, 1.662124711, 1.66452732, 1.666936885, 1.669353436, 1.671777003, 1.674207618, 1.676645312, 1.679090114, 1.681542056, 1.68400117, 1.686467487, 1.688941038, 1.691421857, 1.693909974, 1.696405421, 1.698908233, 1.70141844, 1.703936076, 1.706461174, 1.708993767, 1.711533888, 1.714081572, 1.716636852, 1.719199761, 1.721770335, 1.724348607, 1.726934613, 1.729528387, 1.732129964, 1.734739379, 1.737356669, 1.739981868, 1.742615012, 1.745256138, 1.747905282, 1.750562481, 1.753227771, 1.755901189, 1.758582773, 1.76127256, 1.763970588, 1.766676895, 1.769391518, 1.772114497, 1.774845869, 1.777585675, 1.780333952, 1.78309074, 1.785856079, 1.788630009, 1.79141257, 1.794203802, 1.797003745, 1.799812441, 1.802629931, 1.805456256, 1.808291457, 1.811135577, 1.813988658, 1.816850742, 1.819721871, 1.822602089, 1.825491439, 1.828389965, 1.83129771, 1.834214718, 1.837141034, 1.840076702, 1.843021767, 1.845976274, 1.84894027, 1.851913799, 1.854896907, 1.857889642, 1.860892049, 1.863904176, 1.86692607, 1.869957778, 1.872999349, 1.876050831, 1.879112272, 1.88218372, 1.885265226, 1.888356838, 1.891458607, 1.894570582, 1.897692815, 1.900825355, 1.903968254, 1.907121563, 1.910285335, 1.913459621, 1.916644474, 1.919839947, 1.923046092, 1.926262964, 1.929490617, 1.932729104, 1.93597848, 1.939238801, 1.942510121, 1.945792497, 1.949085985, 1.952390641, 1.955706522, 1.959033685, 1.962372188, 1.965722089, 1.969083447, 1.972456321, 1.975840769, 1.979236851, 1.982644628, 1.98606416, 1.989495508, 1.992938733, 1.996393897, 1.999861063, 2.003340292, 2.006831649, 2.010335196, 2.013850997, 2.017379117, 2.020919621, 2.024472574, 2.028038042, 2.03161609, 2.035206787, 2.038810198, 2.042426392, 2.046055437, 2.049697401, 2.053352354, 2.057020364, 2.060701503, 2.064395841, 2.068103448, 2.071824397, 2.07555876, 2.079306609, 2.083068017, 2.086843059, 2.090631808, 2.09443434, 2.098250729, 2.102081051, 2.105925384, 2.109783804, 2.113656388, 2.117543214, 2.121444363, 2.125359911, 2.129289941, 2.133234531, 2.137193764, 2.14116772, 2.145156483, 2.149160134, 2.153178758, 2.157212439, 2.161261261, 2.16532531, 2.169404672, 2.173499434, 2.177609682, 2.181735506, 2.185876993, 2.190034234, 2.194207317, 2.198396334, 2.202601377, 2.206822537, 2.211059908, 2.215313582, 2.219583655, 2.22387022, 2.228173375, 2.232493214, 2.236829837, 2.24118334, 2.245553822, 2.249941383, 2.254346124, 2.258768144, 2.263207547, 2.267664435, 2.272138911, 2.276631079, 2.281141046, 2.285668916, 2.290214797, 2.294778796, 2.299361022, 2.303961585, 2.308580593, 2.31321816, 2.317874396, 2.322549415, 2.327243331, 2.331956258, 2.336688312, 2.34143961, 2.346210269, 2.351000408, 2.355810147, 2.360639606, 2.365488907, 2.370358172, 2.375247525, 2.38015709, 2.385086993, 2.39003736, 2.395008319, 2.4 };
		//std::vector<Material_Layer> layers( 1, materials );
		//Result_Data results = Get_Expected_Transmission( temperature_k, layers, 1E-6 * x_values, backside_material );
		//if( !debug_file.is_open() )
		//	return;
		//debug_file << "Transmission: ";
		//for( double y : results.transmission )
		//	debug_file << y << "\t";
		//debug_file << "\n";
		//debug_file << "Reflection: ";
		//for( double y : results.refelection )
		//	debug_file << y << "\t";
		//debug_file << "\n";
		//debug_file.close();
	}
}


void Debug_Print( std::string name, arma::cx_mat out )
{
	return;
	cx_double debug00 = out( 0, 0 );
	cx_double debug10 = out( 1, 0 );
	cx_double debug01 = out( 0, 1 );
	cx_double debug11 = out( 1, 1 );
	if( !debug_file.is_open() )
		return;
	debug_file << name << "\n";
	debug_file << "[ " << debug00 << ", " << debug01 << "\n";
	debug_file << "  " << debug10 << ", " << debug11 << "]\n";
}

Result_Data Get_Expected_Transmission( const std::vector<Material_Layer> & layers, const arma::vec & wavelengths, Material_Layer backside_material )
{
	cx_vec previous_ns( arma::size( wavelengths ), arma::fill::ones );// , { 1, 0 }; // Air
	cx_cube Overall_Matrix( 2, 2, wavelengths.n_rows );
	Overall_Matrix.each_slice() = arma::eye<cx_mat>( 2, 2 );
	cx_cube A_matrix( arma::size( Overall_Matrix ) );
	cx_cube M_matrix( arma::size( Overall_Matrix ) );

	for( const auto & layer : layers )
	{
		cx_vec current_ns = Get_Refraction_Index( layer.material, wavelengths, layer.parameters );

		{ // Setup A_matrix
			cx_vec sum = (current_ns + previous_ns) / (2. * current_ns);
			cx_vec difference = (current_ns - previous_ns) / (2. * current_ns);
			A_matrix.tube( 0, 0 ) = sum;
			A_matrix.tube( 0, 1 ) = difference;
			A_matrix.tube( 1, 0 ) = difference;
			A_matrix.tube( 1, 1 ) = sum;

			Debug_Print( "A Matrix", A_matrix.slice( 0 ) );
		}

		{ // Setup M_matrix
			arma::cx_vec exponent = 2.0 * datum::pi * current_ns % (layer.parameters.thickness.value() / wavelengths);
			M_matrix.zeros();
			cx_double debug_again = std::exp( 1i * exponent( 0 ) );
			for( cx_double & z : exponent )
				z.real( std::fmod( z.real(), 2 * datum::pi ) );
			M_matrix.tube( 0, 0 ) = arma::exp( 2i * exponent );
			M_matrix.tube( 1, 1 ).ones();

			Debug_Print( "M Matrix", M_matrix.slice( 0 ) );
		}

		// Matrix multiply overall with current layer's M and A matrices
		for( auto i = 0; i < Overall_Matrix.n_slices; i++ )
			Overall_Matrix.slice( i ) = M_matrix.slice( i ) * A_matrix.slice( i ) * Overall_Matrix.slice( i );
		previous_ns = std::move( current_ns );
	}
	// debug_file << "Here 1\n";
	{
		if( backside_material.material == Material::Mirror )
			A_matrix.fill( cx_double( 1 / 2., 0 ) );
		else
		{ // Setup final A_matrix
			cx_vec backside_ns = Get_Refraction_Index( backside_material.material, wavelengths, backside_material.parameters );
			cx_vec sum = (backside_ns + previous_ns) / (2. * backside_ns);
			cx_vec difference = (backside_ns - previous_ns) / (2. * backside_ns);
			A_matrix.tube( 0, 0 ) = sum;
			A_matrix.tube( 0, 1 ) = difference;
			A_matrix.tube( 1, 0 ) = difference;
			A_matrix.tube( 1, 1 ) = sum;
		}

		// Multiply the final A matrix
		for( auto i = 0; i < Overall_Matrix.n_slices; i++ )
			Overall_Matrix.slice( i ) = A_matrix.slice( i ) * Overall_Matrix.slice( i );
	}
	// debug_file << "Here 2\n";
	//return { arma::vec(2049, arma::fill::ones), arma::vec(2049, arma::fill::ones) };

	if constexpr( true ) // Version with exit transition
	{
		const arma::vec exit_backside_amount = [ &wavelengths, backside_material ]() -> arma::vec
		{
			cx_vec backside_ns = Get_Refraction_Index( backside_material.material, wavelengths, backside_material.parameters );
			//debug_file << "wavelengths = " << wavelengths << "\n";
			//debug_file << "parameters = " << backside_material.parameters << "\n";
			//debug_file << "n = " << arma::real( backside_ns ) << "\n";
			//debug_file << "k = " << arma::imag( backside_ns ) << "\n";
			arma::cx_vec sum = ( 1. + backside_ns ) / 2.;
			arma::cx_vec difference = ( 1. - backside_ns ) / 2.;
			arma::cx_vec difference2 = difference % difference;
			arma::cx_vec transmission_amplitude = sum - difference2 / sum;
			//auto transmission_amplitude = sum - difference % difference / sum; // sum - difference % difference seems to break release build
			return arma::vec( arma::real( transmission_amplitude % arma::conj( transmission_amplitude ) ) );
			//auto reflection_amplitude = difference / sum;
			//return vec( real( reflection_amplitude % conj( reflection_amplitude ) ) );
		}();
		Debug_Print( "Overall Matrix", Overall_Matrix.slice( 0 ) );
		auto transmission_amplitude = Overall_Matrix.tube( 0, 0 ) - Overall_Matrix.tube( 0, 1 ) % Overall_Matrix.tube( 1, 0 ) / Overall_Matrix.tube( 1, 1 );
		vec transmission = exit_backside_amount % vec( real( transmission_amplitude % conj( transmission_amplitude ) ) );
		auto reflection_amplitude = Overall_Matrix.tube( 1, 0 ) / Overall_Matrix.tube( 1, 1 );
		vec reflection = real( reflection_amplitude % conj( reflection_amplitude ) );
		// debug_file << "Here 3\n";

		return { transmission, reflection };
	}
	else
	{
		Debug_Print( "Overall Matrix", Overall_Matrix.slice( 0 ) );
		auto transmission_amplitude = Overall_Matrix.tube( 0, 0 ) - Overall_Matrix.tube( 0, 1 ) % Overall_Matrix.tube( 1, 0 ) / Overall_Matrix.tube( 1, 1 );
		vec transmission = real( transmission_amplitude % conj( transmission_amplitude ) );
		auto reflection_amplitude = Overall_Matrix.tube( 1, 0 ) / Overall_Matrix.tube( 1, 1 );
		vec reflection = real( reflection_amplitude % conj( reflection_amplitude ) );

		return { transmission, reflection };
	}
	//if( std::norm( one_slice( 1, 1 ) ) > 1E-9 )
	//if( std::norm<double>( one_slice( 1, 1 ) ) != 0.0 )

	//if( transmission > 1.0 )
	//	Debug_Print( "Overall Matrix", one_slice );
}

void Thin_Film_Interference::Get_Best_Fit( const std::vector<Material_Layer> & layers,
										   const arma::vec & wavelengths,
										   const arma::vec & transmissions,
										   Material_Layer backside_material )
{
	std::vector<Material_Layer> copy_layers = layers;
	//double largest_transmission = arma::max( transmissions );
	//const arma::vec scaled_transmissions = transmissions / largest_transmission;
	const arma::vec scaled_transmissions = transmissions / 100.0;
	auto minimize_function = [this, &copy_layers, &wavelengths, &scaled_transmissions, &backside_material ]( const arma::vec& input_to_optimize )
	{
		auto fit_parameters = Get_Things_To_Fit( copy_layers );
		bool invalid_input = false;
		int i = 0;
		for( std::optional< double >* parameter : fit_parameters )
		{
			if( input_to_optimize( i ) < 0 )
				invalid_input = true;
			*parameter = input_to_optimize( i );
			i++;
		}
		if( invalid_input )
			return 9999999999.;
		Result_Data results = Get_Expected_Transmission( copy_layers, wavelengths, backside_material );
		arma::vec difference = results.transmission - scaled_transmissions;

		//emit Debug_Plot( wavelengths, 100 * (difference % difference) );

		double error = arma::dot( difference, difference );
		return error;
	};

	auto show_results = [this, copy_layers, backside_material]( arma::vec current_results )
	{
		std::vector<Material_Layer> current_guess = copy_layers;
		auto fit_parameters = Get_Things_To_Fit( current_guess );
		int i = 0;
		for( std::optional< double >* parameter : fit_parameters )
		{
			*parameter = current_results( i );
			i++;
		}
		emit Updated_Guess( current_guess );
		QCoreApplication::processEvents();
		return this->quit_early;
	};

	auto fit_parameters = Get_Things_To_Fit( copy_layers );
	arma::vec initial_guess( fit_parameters.size() );
	int i = 0;
	for( std::optional< double >* parameter : fit_parameters )
	{
		initial_guess[ i ] = parameter->value();
		i++;
	}

	arma::vec solution = Minimize_Function_Starting_Point( minimize_function, initial_guess, 1000, 1.0, 1E-10, 0.2, show_results );
}


void Thin_Film_Interference::Quit_Early()
{
	this->quit_early = true;
}

Material_To_Refraction_Component Thin_Film_Interference::Attenuation_Coefficient{ Load_Index_Of_Refraction_Files(fs::path("./Refractive_Index"), "_k" ) };
Material_To_Refraction_Component Thin_Film_Interference::Refraction_Coefficient{ Load_Index_Of_Refraction_Files(fs::path("./Refractive_Index"), "_n" ) };

arma::cx_vec SiO2_Index( const arma::vec & wavelengths )
{
	using namespace arma;
	arma::vec n = sqrt( 1 + 0.6961663 / (1 - pow( 0.0684043 / wavelengths, 2 )) + 0.4079426 / (1 - pow( 0.1162414 / wavelengths, 2 )) + 0.8974794 / (1 - pow( 9.896161 / wavelengths, 2 )) );

	return arma::cx_vec( n, arma::zeros( n.size() ) );
}


Material_To_Refraction_Component Load_Index_Of_Refraction_Files( const fs::path & directory, const char* indicator )
{
	if( !fs::exists( directory ) || !fs::is_directory( directory ) )
		return Material_To_Refraction_Component();
		//throw "Cannot access directory: " + directory.string();

	Material_To_Refraction_Component full_list;

	for( auto & file : fs::directory_iterator( directory ) )
	{
		std::string just_file_name = file.path().filename().string();
		if( !fs::is_regular_file( file ) || !boost::contains( just_file_name, indicator ) )
			continue;

		for( const auto & material : name_to_material )
		{
			std::string material_name = material.first;
			std::smatch results;
			if( std::regex_search( just_file_name, results, std::regex( "^" + material_name + "_[kn]\\.csv" ) ) )
			{
				std::ifstream data_file( file.path() );
				std::string whole_file( (std::istreambuf_iterator<char>( data_file )),
										std::istreambuf_iterator<char>() );

				full_list[ material.second ] = Load_XY_CSV_Data( whole_file );
			}
		}
	}

	return full_list;
}
